// This file was generated by Mendix Modeler.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package redisconnector.actions;

import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import redisconnector.impl.RedisConnector;

/**
 * DEL key [key ...]
 * 
 * Available since 1.0.0.
 * Time complexity: O(N) where N is the number of keys that will be removed. When a key to remove holds a value other than a string, the individual complexity for this key is O(M) where M is the number of elements in the list, set, sorted set or hash. Removing a single key that holds a string value is O(1).
 * Removes the specified keys. A key is ignored if it does not exist.
 * Return value
 * Integer reply: The number of keys that were removed.
 * Examples
 * redis> SET key1 "Hello"
 * OK
 * redis> SET key2 "World"
 * OK
 * redis> DEL key1 key2 key3
 * (integer) 2
 * redis> 
 */
public class DeleteKey extends CustomJavaAction<Long>
{
	private String key;

	public DeleteKey(IContext context, String key)
	{
		super(context);
		this.key = key;
	}

	@Override
	public Long executeAction() throws Exception
	{
		// BEGIN USER CODE
		RedisConnector redisconnector = new RedisConnector(); 
		return redisconnector.del(key);
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@Override
	public String toString()
	{
		return "DeleteKey";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
