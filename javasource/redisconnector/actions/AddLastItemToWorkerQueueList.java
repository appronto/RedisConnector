// This file was generated by Mendix Modeler.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package redisconnector.actions;

import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import redisconnector.impl.RedisConnector;

/**
 * Atomically returns and removes the last element (tail) of the list stored at source, and pushes the element at the first element (head) of the list stored at destination.
 * For example: consider source holding the list a,b,c, and destination holding the list x,y,z. Executing RPOPLPUSH results in source holding a,b and destination holding c,x,y,z.
 * If source does not exist, the value nil is returned and no operation is performed. If source and destination are the same, the operation is equivalent to removing the last element from the list and pushing it as first element of the list, so it can be considered as a list rotation command.
 * 
 * If timeout provided
 * BRPOPLPUSH is the blocking variant of RPOPLPUSH. When source contains elements, this command behaves exactly like RPOPLPUSH. When used inside a MULTI/EXEC block, this command behaves exactly like RPOPLPUSH. When source is empty, Redis will block the connection until another client pushes to it or until timeout is reached. A timeout of zero can be used to block indefinitely.
 * 
 * Return value
 * Bulk string reply: the element being popped and pushed.
 */
public class AddLastItemToWorkerQueueList extends CustomJavaAction<String>
{
	private String sourceList;
	private String destionationList;
	private Long timeout_optional_empty;

	public AddLastItemToWorkerQueueList(IContext context, String sourceList, String destionationList, Long timeout_optional_empty)
	{
		super(context);
		this.sourceList = sourceList;
		this.destionationList = destionationList;
		this.timeout_optional_empty = timeout_optional_empty;
	}

	@Override
	public String executeAction() throws Exception
	{
		// BEGIN USER CODE
		RedisConnector redisconnector = new RedisConnector();     
		if (timeout_optional_empty != null)
		{
			return redisconnector.brpoplpush(sourceList, destionationList, timeout_optional_empty.intValue());
		}
		else
		{
			return redisconnector.rpoplpush(sourceList, destionationList);
		}
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@Override
	public String toString()
	{
		return "AddLastItemToWorkerQueueList";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
