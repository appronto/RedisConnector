// This file was generated by Mendix Modeler.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package redisconnector.actions;

import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import redisconnector.impl.RedisConnector;
import com.mendix.systemwideinterfaces.core.IMendixObject;

/**
 * Available since 1.2.0.
 * Time complexity: O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements returned.
 * Returns the specified range of elements in the sorted set stored at key. The elements are considered to be ordered from the lowest to the highest score. Lexicographical order is used for elements with equal score.
 * See ZREVRANGE when you need the elements ordered from highest to lowest score (and descending lexicographical order for elements with equal score).
 * Both start and stop are zero-based indexes, where 0 is the first element, 1 is the next element and so on. They can also be negative numbers indicating offsets from the end of the sorted set, with -1 being the last element of the sorted set, -2 the penultimate element and so on.
 * start and stop are inclusive ranges, so for example ZRANGE myzset 0 1 will return both the first and the second element of the sorted set.
 * Out of range indexes will not produce an error. If start is larger than the largest index in the sorted set, or start > stop, an empty list is returned. If stop is larger than the end of the sorted set Redis will treat it like it is the last element of the sorted set.
 * It is possible to pass the WITHSCORES option in order to return the scores of the elements together with the elements. The returned list will contain value1,score1,...,valueN,scoreN instead of value1,...,valueN. Client libraries are free to return a more appropriate data type (suggestion: an array with (value, score) arrays/tuples).
 * Return value
 * Array reply: list of elements in the specified range (optionally with their scores, in case the WITHSCORES option is given).
 */
public class GetValuesFromSortedListWithScore extends CustomJavaAction<java.util.List<IMendixObject>>
{
	private String key;
	private Long start;
	private Long stop;
	private redisconnector.proxies.Enum_Sort sort;

	public GetValuesFromSortedListWithScore(IContext context, String key, Long start, Long stop, String sort)
	{
		super(context);
		this.key = key;
		this.start = start;
		this.stop = stop;
		this.sort = sort == null ? null : redisconnector.proxies.Enum_Sort.valueOf(sort);
	}

	@Override
	public java.util.List<IMendixObject> executeAction() throws Exception
	{
		// BEGIN USER CODE
		RedisConnector redisconnector = new RedisConnector(); 
		return redisconnector.zrangeWithScore(this.getContext(), key,start, stop, sort);
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@Override
	public String toString()
	{
		return "GetValuesFromSortedListWithScore";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
