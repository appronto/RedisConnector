// This file was generated by Mendix Modeler.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package redisconnector.actions;

import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import redisconnector.impl.RedisConnector;
import com.mendix.systemwideinterfaces.core.IMendixObject;

/**
 * Return the positions (longitude,latitude) of all the specified members of the geospatial index represented by the sorted set at key.
 * Given a sorted set representing a geospatial index, populated using the GEOADD command, it is often useful to obtain back the coordinates of specified members. When the geospatial index is populated via GEOADD the coordinates are converted into a 52 bit geohash, so the coordinates returned may not be exactly the ones used in order to add the elements, but small errors may be introduced.
 * The command can accept a variable number of arguments so it always returns an array of positions even when a single element is specified.
 * Return value
 * Array reply, specifically:
 * The command returns an array where each element is a two elements array representing longitude and latitude (x,y) of each member name passed as argument to the command.
 * Non existing elements are reported as NULL elements of the array.
 */
public class GetGeoPosition extends CustomJavaAction<IMendixObject>
{
	private String key;
	private String name;

	public GetGeoPosition(IContext context, String key, String name)
	{
		super(context);
		this.key = key;
		this.name = name;
	}

	@Override
	public IMendixObject executeAction() throws Exception
	{
		// BEGIN USER CODE
		RedisConnector redisconnector = new RedisConnector(); 
		return redisconnector.geopos(this.getContext(), key, name);
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@Override
	public String toString()
	{
		return "GetGeoPosition";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
